services:

  web:
    build:
      context: .
      dockerfile: backend/Dockerfile
    volumes:
      - ./backend:/app
      - ./uploads/avatars:/uploads
      - ./sslcert:/etc/nginx/ssl
    ports:
      - "8000:8000"
    command: ["watchfiles", "daphne -b 0.0.0.0 -p 8000 config.asgi:application"]
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - DJANGO_SETTINGS_MODULE=config.settings
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    image: nginx:latest
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf
      - ./sslcert:/etc/nginx/ssl
      - ./uploads/avatars:/uploads
    ports:
      - "3000:443"
    environment:
      - NODE_ENV=production
    depends_on:
      - web

  redis:
    image: redis:latest
    ports:
      - "6380:6379"

  celery-worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: ["celery", "-A", "config", "worker", "--loglevel=warning"]
    depends_on:
      - redis
      - web
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - DJANGO_SETTINGS_MODULE=config.settings
    env_file:
      - .env
    volumes:
      - ./backend:/app

  celery-beat:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: ["celery", "-A", "config", "beat", "--loglevel=warning"]
    depends_on:
      - redis
      - web
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - DJANGO_SETTINGS_MODULE=config.settings
    env_file:
      - .env
    volumes:
      - ./backend:/app
      
  postgres:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 10s

volumes:
  uploads:
    driver: local
  pg_data:
    driver: local